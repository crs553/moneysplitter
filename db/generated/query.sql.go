// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package moneysplitter

import (
	"context"
	"database/sql"
)

const addExpenseParticipant = `-- name: AddExpenseParticipant :exec
INSERT INTO expense_participants (expense_id, user_id) VALUES (?, ?)
`

type AddExpenseParticipantParams struct {
	ExpenseID sql.NullInt64
	UserID    sql.NullInt64
}

func (q *Queries) AddExpenseParticipant(ctx context.Context, arg AddExpenseParticipantParams) error {
	_, err := q.db.ExecContext(ctx, addExpenseParticipant, arg.ExpenseID, arg.UserID)
	return err
}

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (amount, payer_id, description) VALUES (?, ?, ?) RETURNING id, amount, payer_id, description
`

type CreateExpenseParams struct {
	Amount      float64
	PayerID     int64
	Description sql.NullString
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense, arg.Amount, arg.PayerID, arg.Description)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PayerID,
		&i.Description,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, name, email, password_hash)
VALUES (?, ?, ?, ?)
RETURNING id, username, name, email, password_hash
`

type CreateUserParams struct {
	Username     string
	Name         string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getAllExpenses = `-- name: GetAllExpenses :many
SELECT id, amount, payer_id, description FROM expenses
`

func (q *Queries) GetAllExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getAllExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.PayerID,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseParticipants = `-- name: GetExpenseParticipants :many
SELECT user_id FROM expense_participants WHERE expense_id = ?
`

func (q *Queries) GetExpenseParticipants(ctx context.Context, expenseID sql.NullInt64) ([]sql.NullInt64, error) {
	rows, err := q.db.QueryContext(ctx, getExpenseParticipants, expenseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullInt64
	for rows.Next() {
		var user_id sql.NullInt64
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, name, email, password_hash FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, name, email, password_hash FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, name, email, password_hash FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
